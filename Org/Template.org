# -*- mode:org; -*-

#+title:TITLE
#+subtitle:{{{version}}} {{{date}}}
#+author:AUTHOR
#+date:2020-01-12 23:36
#+macro:version Version 0.0.0

/{{{title}}}/ {{{version}}} compiled {{{date}}}

#+texinfo:@insertcopying


* Introduction
:PROPERTIES:
:unnumbered: t
:END:
* Chapter

* Build Tools
:PROPERTIES:
:appendix: t
:END:

** Makefile
:PROPERTIES:
:appendix: t
:END:

# curl -i 
#      -H "authorization: token $token" 
#      -H "content-type: application/json" 
#      -X PATCH 
#      -d '{"homepage":"https://pinecone-forest.com/aws-guide-v0.0.56"}'
#      https://api.github.com/repos/wlharvey4/AWS-Guide

#+name:Makefile
#+header: :tangle Makefile
#+header: :noweb tangle
#+begin_src makefile
  ### PROGRAM
  PROG   = <<get-org-filename()>>
  DIR    = <<get-org-lc-filename()>>
  VERS   = <<get-file-version()>>
  S3VERS = <<get-s3-version()>>

  ### TOOLS
  TOOLS  = tools
  CMPRPL = $(TOOLS)/cmprpl

  ### TEXINFO
  ORG   = $(PROG).org
  TEXI  = $(PROG).texi
  INFO  = $(PROG).info
  PDF   = $(PROG).pdf
  HTML  = $(DIR)/index.html

  ### HTML DIR
  DIROLD= $(DIR)-old
  INDEX = index.html

  ### AWS
  BUCKET = s3://$(AWS_S3_BUCKET)
  AWS    = aws2
  S3     = $(AWS) s3
  SRC    = $(DIR)/

  DST_OLD = $(BUCKET)/$(DIR)-$(S3VERS)
  DST_NEW = $(BUCKET)/$(DIR)-$(VERS)
  EXCL_INCL = --exclude "*" --include "*.html"
  GRANTS = --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
  REGION = --region us-west-2
  S3SYNC = $(S3) sync $(EXCL_INCL) $(SRC) $(DST_OLD) $(REGION) $(GRANTS)
  S3MOVE = $(S3) mv --recursive $(DST_OLD) $(DST_NEW) $(REGION) $(GRANTS)

  default: check texi info html pdf

  PHONY:  check default all \
	  texi info html pdf \
	  open-org open-texi open-html open-pdf \
	  clean clean-dist help sync

  show-version:
	  @echo EMACSLOADPATH $(EMACSLOADPATH)
	  @echo AWS_S3_BUCKET $(AWS_S3_BUCKET)
	  @echo PROG $(PROG)
	  @echo VERS $(VERS)
	  @echo S3VERS $(S3VERS)
	  @echo DIR $(DIR)
	  @echo DIROLD $(DIROLD)
	  @echo SRC $(SRC)
	  @echo DST_OLD $(DST_OLD)
	  @echo DST_NEW $(DST_NEW)

  check:
	  @[[ -z $${AWS_S3_BUCKET} ]] && \
	     { printf "$${RED}\$$AWS_S3_BUCKET $${CYAN}must be set.$${CLEAR}\n"; exit 1; } || \
	     printf "$${GREEN}\$${AWS_S3_BUCKET}: $${CYAN}$${AWS_S3_BUCKET}$${CLEAR}\n";

  open-org: $(ORG)
	  emacsclient $(ORG) &
  $(ORG):
	  @echo 'DISASTER HAS BEFALLEN YOU AS THERE IS NO $(ORG) FILE!!!'
	  exit 1

  texi: $(TEXI)
  $(TEXI): $(ORG)
	  emacs --batch --eval '\
	  (progn \
	    (require (quote org)) \
	    (require (quote ob)) \
	    (require (quote ox-texinfo)) \
	    (require (quote ob-shell)) \
	    (setq org-confirm-babel-evaluate nil) \
	    (find-file "$(ORG)") \
	    (org-export-to-file (quote texinfo) "$(TEXI)"))'

  open-texi: texi
	  emacsclient $(TEXI) &

  info: $(INFO)
  $(INFO): $(TEXI)
	  makeinfo $(TEXI)

  html: $(HTML)
  $(HTML): $(TEXI)
	  makeinfo --html $(TEXI)
	  $(CMPRPL) $(DIR) $(DIROLD)
  open-html: html
	  open $(HTML)

  pdf: $(PDF)
  $(PDF): $(TEXI)
	  pdftexi2dvi --quiet --build=clean $(TEXI)
  open-pdf: pdf
	  open $(PDF)

  sync: $(HTML)
	  $(S3SYNC)
	  [[ $(VERS) != $(S3VERS) ]] && $(S3MOVE) || :

  clean:
	  -rm *~

  clean-dist: clean
	  -rm -rf *.{texi*,info*,html*,pdf*} $(DIR) $(TOOLS)

  help:
	  @echo '"make default" makes the .texi file, the .info file, \
	  the html files, and the .pdf file.'
	  @echo

	  @echo '"make sync" syncs the html files in the AWS S3 bucket BUCKET; \
	  you must have your AWS S3 bucket name in the env var AWS_S3_BUCKET; \
	  You must have your AWS credentials installed in ~/.aws/credentials'
	  @echo

	  @echo '"make texi" makes the .texi file'
	  @echo '"make info" makes the .info file'
	  @echo '"make html" makes the html distribution in a subdirectory'
	  @echo '"make pdf" makes the .pdf file'
	  @echo

	  @echo '"make open-org" opens the ORG program using emacsclient for editing'
	  @echo '"make open-texi" opens the .texi file using emacsclient for review'
	  @echo '"make open-html" opens the distribution index.html file \
	  in the default web browser'
	  @echo '"make open-pdf" opens the .pdf file'
	  @echo

	  @echo '"make clean" removes the .texi, .info, and backup files ("*~")'
	  @echo '"make clean-dist" cleans, removes the html distribution, \
	  and removes the build directory'

#+end_src

*** TODO Next
1. The CloudFront configuration needs to be updated recognize the new version
   directory that is created as part of the ~sync~ operation.

2. Update the GitHub HOME website link for each new sync operation.

3. Store on GitHub a version of each other format upon a sync operation (i.e.,
   the INFO and PDF versions)

** Get Org Filename
This program simply uses the name of the buffer to obtain the name of the
filename to add to the Makefile.

#+caption:Get Org Filename program
#+name:get-org-filename
#+begin_src emacs-lisp :eval yes
(file-name-base)
#+end_src

** Get Org Lowercase Filename
This program simply downcases the buffer filename to use as a directory name
for the HTML output.

#+caption:Get Org Lowercase Filename program
#+name:get-org-lc-filename
#+begin_src emacs-lisp :eval yes
(downcase (file-name-base))
#+end_src

** Get File Version
This program scans the current buffer for the version number and places it into
the Makefile.

#+caption:Get File Version program
#+name:get-file-version
#+begin_src emacs-lisp :eval yes
  (save-excursion
    (goto-char (point-min))
    (re-search-forward "^#\\+macro:version Version \\(\\(?:[[:digit:]]+\\.?\\)\\{3\\}\\)")
    (concat "v" (match-string-no-properties 1) "/"))
#+end_src

** Get S3 Version
:PROPERTIES:
:dependency: ">= bash v4"
:END:
This program obtains the version number of the code currently uploaded to the
S3 bucket by obtaining a directory listing of top-level directories, which are
in the form ~PRE <dir>-v#.#.#/~, and performs a regular expression search with
a parenthesized match on the version numbers.  The program will exit with 'nil'
if there is no match, but will return the version number as a string if there
is a match.

Note that the regular expression matching requires at least Bash version 4 or
above.

#+caption:Get S3 Version
#+name:get-s3-version
#+header: :var dir=get-org-lc-filename()
#+header: :var file_version=get-file-version()
#+header: :results output
#+header: :eval yes
#+header: :shebang "#! /usr/bin/env bash"
#+begin_src sh
  if [[ ${file_version} = "v0.0.0/" ]]
  then
      echo -n "nil"

  else
      re=${dir}'-(v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+)'

      # obtain a list of directories in the aws s2 bucket
      verpre=$(aws2 s3 ls s3://${AWS_S3_BUCKET}/)

      # check for a match; if one, return the version number; else return 'nil'
      if [[ $verpre =~ $re ]]
      then
		echo -n ${BASH_REMATCH[1]}
      else
		echo -n "nil"
      fi
  fi
#+end_src

** Compare Replace

#+begin_comment
The following source code tangles all files during an export operation.  This
is to make sure the ~cmprpl~ source code exists in the ~tools/~ directory
before running the Makefile target =html=.  It also makes sure there is a
Makefile on an initial export.  The following code is not exported.
#+end_comment

#+name:tangle-org-file
#+header: :exports results :eval yes :results silent
#+begin_src emacs-lisp
(org-babel-tangle-file (buffer-file-name))
#+end_src

The ~cmprpl~ source code attempts to resolve the issue of identical exported
code having different time stamps, thus defeating the benefit provided by the
~aws2 s3 sync~ command uploading only changed files.

This program makes sure that a generated HTML directory exists: $DIRNEW.  If it
doesn’t, then it is in an improper state and the program stops with an error
message.

The program then checks if an old directory exists, $DIROLD.  If one doesn’t,
then one is created by copying the current new directory.  This provides a
baseline for comparisons going forward.  The program exits at that point.

Given that $DIROLD exists, the program then loops through all files in $DIROLD
and compares them to the files in $DIRNEW.  If the files are identical, the
$DIROLD file replaces the $DIRNEW file while retaining the old time stamp.  If
a file is different, then the $DIRNEW file replaces the $DIROLD file, thus
giving it updated content and an updated time stamp.

The program then loops through all of the files in the new directory and copies
any that do not exist in the old directory.  Now both directories should be in
sync.

It is important to retain the $DIROLD directory for as long as possible to reap
the most benefits from the AWS S3 ~sync~ command.

#+caption:Compare Replace program
#+name:cmprpl
#+header: :mkdirp t
#+header: :shebang "#!/usr/bin/env bash"
#+begin_src sh :tangle tools/cmprpl
  [[ $# -eq 2 ]] || { echo "ERROR: Incorrect command line arguments"; exit 1; }
  DIRNEW=$1
  DIROLD=$2

  [[ -d $DIRNEW ]] || { echo "ERROR: $DIRNEW does not exist"; exit 1; }
  [[ -d $DIROLD ]] || { echo "CREATING: $DIROLD does not exist"; cp -a $DIRNEW $DIROLD; exit 0; }

  for oldfile in $DIROLD/*
  do
      newfile=$DIRNEW/$(basename $oldfile)
      if [[ -e $newfile ]]
      then
	      if cmp -s $newfile $oldfile
	      then
	          printf "${GREEN}copying OLD to NEW${CLEAR}: "
	          cp -vp $oldfile $newfile
	      else
	          printf "${MAGENTA}copying NEW to OLD${CLEAR}: "
	          cp -vp $newfile $oldfile
	      fi
      else
	      printf "${RED}removing OLD:${CLEAR} "
	      rm -v $oldfile
      fi
  done

  for newfile in $DIRNEW/*
  do
      oldfile=$DIROLD/$(basename $newfile)
      [[ -e $oldfile ]] || { printf "${BLUE}copying NEW to OLD${CLEAR}: "
			     cp -vp $newfile $oldfile; }
  done
#+end_src


* Build Scripts
** Create Script
This code is a script file to create a new project from this template.  It
takes one required, and one optional command line argument.  The required
argument is the name of the project.  The optional is the name of the author.
It creates a new directory in the current working directory using the first
argument, then copies this template into it as a new Org file with the name of
the argument.  It then updates the title, and optionally the author, using the
command line arguments.  Finally, it deletes this script from the new Org file.

#+caption:Create Script
#+name:create-script
#+header: :tangle ~/Dev/bin/org-template
#+header: :shebang "#!/usr/bin/env bash"
#+header: :noweb tangle
#+begin_src sh
    # $1 := Title
    [[ ($# -eq 1) || ($# -eq 2) ]] || {
	  printf "${RED}ERROR: ${YELLOW}\'org-template ${RED}<TITLE>${YELLOW} [<AUTHOR>]\'${CLEAR}"
	  exit 1
    }
    printf "${PURPLE}"
    read -N 1 -p "Create new directory '$1' (y/n) ?"
    printf "${CLEAR}\n\n"
    [[ $REPLY =~ [yY] ]] && printf "${GREEN}" || {
	  printf "${RED}abort${CLEAR}"
	  exit 0
	}

    mkdir -v "$1"
    printf "copy "
    cp -v ~/Dev/Templates2/Org/Template.org "$1/$1.org"
    printf "${CLEAR}\n"

    sed -i '' -Ee '/^\#\+title:/ s/TITLE/'"$1"'/' "$1/$1.org"
    [[ $# -eq 2 ]] && \
	sed -i '' -Ee '/^\#\+author:/ s/AUTHOR/'"$2"'/' "$1/$1.org"

    printf "${CYAN}"
    emacs --batch --eval \
      '(progn 
	 (require (quote org))
	 (require (quote ob))
	 (require (quote ob-shell))
	 (setq org-confirm-babel-evaluate nil)
	 (find-file '\"$1/$1.org\"')
	 (search-forward "** Create Script")
	 (org-cut-subtree)
	 (search-backward "** Makefile")
	 (org-babel-tangle 4)
	 (save-buffer 0))'

  printf "${CLEAR}\n"
#+end_src
** Update Script
This code is a script file to update the Build Tools subtree in a current
project with the updated Build Tools subtree from this template.  It copies the
outline structure of the Build Tools from this template file and yanks it into
the current project’s Org file and delete’s the old, outdated Build Tools
subtree.

#+name:update-build-tools
#+begin_src emacs-lisp
  (defun update-build-tools (of-filenm)
    "Update the Build Tools of the argument file, which should be
  an Org file with a current Build Tools subtree."
    (interactive "ffile: ")
    (require (quote org))
    (save-excursion
      (set-buffer
       (find-file-noselect "~/Dev/Templates2/Org/Template.org"))
      (goto-char (point-min))
      (search-forward "* Build Tools")
      (org-beginning-of-line)
      (org-copy-subtree)
      (set-buffer
       (find-file-noselect of-filenm))
      (goto-char (point-min))
      (search-forward "* Build Tools")
      (org-beginning-of-line)
      (org-yank)
      (org-cut-subtree)
      (save-buffer)))
#+end_src

* List of Programs
:PROPERTIES:
:appendix: t
:END:
#+texinfo:@listoffloats Listing

* List of Examples
:PROPERTIES:
:appendix: t
:END:
#+texinfo:@listoffloats Example

* Copying
:PROPERTIES:
:copying:  t
:END:

Copyright \copy 2020 by {{{author}}}

* Concept Index
:PROPERTIES:
:unnumbered: t
:index:    cp
:END:

* Program Index
:PROPERTIES:
:index:    pg
:unnumbered: t
:END:

* Function Index
:PROPERTIES:
:index:    fn
:unnumbered: t
:END:

* Variable Index
:PROPERTIES:
:index:    vr
:unnumbered: t
:END:


* Footnotes


* Export Configurations                                            :noexport:
#+texinfo_filename:
#+texinfo_class: info
#+texinfo_header:
#+texinfo_post_header:
#+subtitle:
#+subauthor:
#+texinfo_dir_category:
#+texinfo_dir_title:
#+texinfo_dir_desc:
#+texinfo_printed_title:


* Local Variables                                                  :noexport:
# Local Variables:
# fill-column: 79
# indent-tabs-mode: t
# time-stamp-pattern: "8/^\\#\\+date:%:y-%02m-%02d %02H:%02M$"
# eval: (electric-quote-local-mode t)
# End:
